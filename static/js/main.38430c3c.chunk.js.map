{"version":3,"sources":["App.js","index.js"],"names":["web3","Web3","givenProvider","lotteryABI","App","props","pollData","a","getPot","getBetEvents","getWinEvents","getFailEvents","makeFinalRecords","initWeb3","window","ethereum","enable","console","log","currentProvider","eth","getAccounts","accounts","account","lotteryContract","Contract","methods","owner","call","pot","potString","utils","fromWei","toString","setState","records","getPastEvents","fromBlock","toBlock","events","i","length","record","index","parseInt","returnValues","bettor","betBlockNumber","blockNumber","targetBlockNumber","answerBlockNumber","challenges","win","answer","unshift","betRecords","failRecords","amount","winRecords","f","w","state","finalRecords","bet","getTransactionCount","nonce","toLowerCase","betAndDistribute","send","from","value","gas","on","hash","onClickCard","_Character","getCard","_cardStyle","_card","className","onClick","style","fontSize","targetBlockAnswer","this","map","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38430c3c.chunk.js","sourcesContent":["import './App.css';\r\nimport Web3 from 'web3';\r\nimport { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nvar web3 = new Web3(Web3.givenProvider);\r\n// after givenProvide: || \"ws://localhost:7545\"\r\n\r\nlet lotteryAddress = '0xEbf40311f2b6237b68139a2d2396F84C2c131671';\r\nlet lotteryABI =[ { \"inputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"index\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"bettor\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"bytes1\", \"name\": \"challenges\", \"type\": \"bytes1\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"answerBlockNumber\", \"type\": \"uint256\" } ], \"name\": \"BET\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"index\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"bettor\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"bytes1\", \"name\": \"challenges\", \"type\": \"bytes1\" }, { \"indexed\": false, \"internalType\": \"bytes1\", \"name\": \"answer\", \"type\": \"bytes1\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"answerBlockNumber\", \"type\": \"uint256\" } ], \"name\": \"DRAW\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"index\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"bettor\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"bytes1\", \"name\": \"challenges\", \"type\": \"bytes1\" }, { \"indexed\": false, \"internalType\": \"bytes1\", \"name\": \"answer\", \"type\": \"bytes1\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"answerBlockNumber\", \"type\": \"uint256\" } ], \"name\": \"FAIL\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"index\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"bettor\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"bytes1\", \"name\": \"challenges\", \"type\": \"bytes1\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"answerBlockNumber\", \"type\": \"uint256\" } ], \"name\": \"REFUND\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"index\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"bettor\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"bytes1\", \"name\": \"challenges\", \"type\": \"bytes1\" }, { \"indexed\": false, \"internalType\": \"bytes1\", \"name\": \"answer\", \"type\": \"bytes1\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"answerBlockNumber\", \"type\": \"uint256\" } ], \"name\": \"WIN\", \"type\": \"event\" }, { \"constant\": true, \"inputs\": [], \"name\": \"answerForTest\", \"outputs\": [ { \"internalType\": \"bytes32\", \"name\": \"\", \"type\": \"bytes32\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [ { \"internalType\": \"address payable\", \"name\": \"\", \"type\": \"address\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"internalType\": \"bytes1\", \"name\": \"challenges\", \"type\": \"bytes1\" } ], \"name\": \"betAndDistribute\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"result\", \"type\": \"bool\" } ], \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"getPot\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"_pot\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"internalType\": \"bytes1\", \"name\": \"challenges\", \"type\": \"bytes1\" } ], \"name\": \"bet\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"result\", \"type\": \"bool\" } ], \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"distribute\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"internalType\": \"bytes32\", \"name\": \"answer\", \"type\": \"bytes32\" } ], \"name\": \"setAnswerForTest\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"result\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"internalType\": \"bytes1\", \"name\": \"challenges\", \"type\": \"bytes1\" }, { \"internalType\": \"bytes32\", \"name\": \"answer\", \"type\": \"bytes32\" } ], \"name\": \"isMatch\", \"outputs\": [ { \"internalType\": \"enum Lottery.BettingResult\", \"name\": \"\", \"type\": \"uint8\" } ], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"index\", \"type\": \"uint256\" } ], \"name\": \"getBetInfo\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"answerBlockNumber\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"bettor\", \"type\": \"address\" }, { \"internalType\": \"bytes1\", \"name\": \"challenges\", \"type\": \"bytes1\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" } ]\r\n\r\nclass App extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state={\r\n      betRecords:[],\r\n      winRecords:[],\r\n      failRecords:[],\r\n      pot:'0',\r\n      challenges:['A','B'],\r\n      finalRecords:[{\r\n        bettor:'0xabcd',\r\n        index:'0',\r\n        challenges:'ab',\r\n        answer:'ab',\r\n        targetBlockAnswer:'10',\r\n        pot:'0'\r\n      }]\r\n    }\r\n  }\r\n\r\n  async componentDidMount (){\r\n    await this.initWeb3();\r\n    await this.pollData();\r\n    /*let account = await web3.eth.getAccounts();\r\n    console.log(account);\r\n    let balance = await web3.eth.getBalance(account[0]);\r\n    console.log(balance);*/\r\n    //let accounts = await this.web3.eth.getAccounts();\r\n    //console.log(accounts);\r\n  }\r\n  pollData = async ()=>{\r\n    await this.getPot();\r\n    await this.getBetEvents();\r\n    await this.getWinEvents();\r\n    await this.getFailEvents();\r\n    this.makeFinalRecords();\r\n  }\r\n  initWeb3 = async () =>{\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          // this.web3.eth.sendTransaction({/* ... */});\r\n      } catch (error) {\r\n          // User denied account access...\r\n          console.log(`User denied account access: ${error}`)\r\n      }\r\n    }\r\n    // Legacy dapp browsers...\r\n    else if (window.web3) {\r\n        console.log('Legacy Mode')\r\n        window.web3 = new Web3(Web3.currentProvider);\r\n        // Acccounts always exposed\r\n        // this.web3.eth.sendTransaction({/* ... */});\r\n    }\r\n    // Non-dapp browsers...\r\n    else {\r\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n    }\r\n    let accounts = await web3.eth.getAccounts();\r\n    this.account = accounts[0];\r\n    this.lotteryContract = new web3.eth.Contract(lotteryABI,lotteryAddress);\r\n    let owner = await this.lotteryContract.methods.owner().call();\r\n    // to test, bet 0.05 eth\r\n    //this.lotteryContract.methods.betAndDistribute('0xcd').send({from: this.account, value:5000000000000000, gas: 300000})\r\n  }\r\n  getPot = async()=>{\r\n    let pot = await this.lotteryContract.methods.getPot().call();\r\n    console.log(pot);\r\n    let potString = web3.utils.fromWei(pot.toString(), 'ether');\r\n    console.log(potString);\r\n    this.setState({pot:potString})\r\n  }\r\n\r\n  getBetEvents = async()=>{\r\n    const records = [];\r\n    let events = await this.lotteryContract.getPastEvents('BET',{fromBlock:0, toBlock:'latest'});\r\n    for (let i=0; i<events.length;i++){\r\n      const record={}\r\n      record.index = parseInt(events[i].returnValues.index, 10).toString();\r\n      record.bettor = events[i].returnValues.bettor;\r\n      record.betBlockNumber = events[i].blockNumber;\r\n      record.targetBlockNumber = events[i].returnValues.answerBlockNumber.toString();\r\n      record.challenges=events[i].returnValues.challenges;\r\n      record.win = \"Not Revealed\";\r\n      record.answer = '0x00'\r\n      records.unshift(record);\r\n    }\r\n    this.setState({betRecords:records})\r\n    // console.log(records);\r\n  }\r\n  getFailEvents = async()=>{\r\n    const records = [];\r\n    let events = await this.lotteryContract.getPastEvents('FAIL',{fromBlock:0, toBlock:'latest'});\r\n    for (let i=0; i<events.length;i++){\r\n      const record={}\r\n      record.index = parseInt(events[i].returnValues.index, 10).toString();\r\n      record.answer = events[i].returnValues.answer;\r\n      records.unshift(record);\r\n    }\r\n    this.setState({failRecords:records})\r\n    // console.log(records);\r\n  }\r\n  getWinEvents = async()=>{\r\n    const records = [];\r\n    let events = await this.lotteryContract.getPastEvents('WIN',{fromBlock:0, toBlock:'latest'});\r\n    for (let i=0; i<events.length;i++){\r\n      const record={}\r\n      record.index = parseInt(events[i].returnValues.index, 10).toString();\r\n      record.amount = parseInt(events[i].returnValues.amount, 10).toString();\r\n      records.unshift(record);\r\n    }\r\n    this.setState({winRecords:records})\r\n    // console.log(records);\r\n  }\r\n  makeFinalRecords = async()=>{\r\n    let f=0, w=0;\r\n    const records = [...this.state.betRecords];\r\n    for(let i=0;i<this.state.betRecords.length;i+=1){\r\n      for(let i=0;i<this.state.betRecords.length;i+=1) {\r\n        console.log(this.state.winRecords.length)\r\n        if(this.state.winRecords.length > 0 && this.state.betRecords[i].index === this.state.winRecords[w].index){\r\n          records[i].win = 'WIN'\r\n          records[i].answer = records[i].challenges;\r\n          records[i].pot = web3.utils.fromWei(this.state.winRecords[w].amount, 'ether');\r\n          if(this.state.winRecords.length - 1 > w) w++;\r\n  \r\n        } else if(this.state.failRecords.length > 0 && this.state.betRecords[i].index === this.state.failRecords[f].index){\r\n          \r\n          records[i].win = 'FAIL'\r\n          records[i].answer = this.state.failRecords[f].answer;\r\n          records[i].pot = 0;\r\n          if(this.state.failRecords.length - 1 > f) f++;\r\n  \r\n        }\r\n      }\r\n      \r\n    }\r\n    this.setState({finalRecords:records})\r\n  }\r\n\r\n  bet = async()=>{\r\n    let nonce = await web3.eth.getTransactionCount(this.account);\r\n    let challenges = '0x'+this.state.challenges[0].toLowerCase()+this.state.challenges[1].toLowerCase();\r\n    this.lotteryContract.methods.betAndDistribute(challenges).send({from: this.account, value:5000000000000000, gas: 300000, nonce:nonce})\r\n    .on('transactionHash', (hash)=>{\r\n      console.log(hash)\r\n    })\r\n    \r\n  }\r\n  onClickCard = (_Character)=>{\r\n    this.setState({\r\n      challenges:[this.state.challenges[1],_Character]\r\n    })\r\n  }\r\n  getCard = (_Character, _cardStyle)=>{\r\n    let _card = '';\r\n    if (_Character==='A'){\r\n      _card = '🂡'\r\n    }\r\n    if (_Character==='B'){\r\n      _card = '🂱'\r\n    }\r\n    if (_Character==='C'){\r\n      _card = '🃁'\r\n    }\r\n    if (_Character==='D'){\r\n      _card = '🃑'\r\n    }\r\n\r\n    return (\r\n      <button className={_cardStyle} onClick={()=>{\r\n        this.onClickCard(_Character)\r\n      }}> \r\n        <div className='card-body text-center'>\r\n            <h1 className='card-text'>{_Character}</h1>\r\n            <p className='card-text text-center' style={{fontSize:300}}>{_card}</p>\r\n            <p className='card-text'></p>\r\n        </div>\r\n      </button>\r\n    )\r\n  }\r\n\r\n  render(){\r\n      return (\r\n        <div className=\"App\">\r\n          {/* Header - Pot, Betting characters */}\r\n          <div className=\"container\">\r\n            <div className=\"jumbotron\">\r\n              <h1>Ropsten Ethereum Lottery Platform</h1>\r\n              <br></br>\r\n              <h2>Current Pot : {this.state.pot}</h2>\r\n            </div>\r\n          </div>\r\n          <div className='container'>\r\n            <div className= 'jumbotron'>\r\n              <h2 className = 'display-4'>Play Intructions:</h2>\r\n              <p className='lead'>Select two cards in the combination, if match, you will win the entire pot!</p>\r\n              <hr className='my-4'></hr>\r\n              <p1>Click on the card to replace the second card and it will push forward to the first one if you click another card. </p1>\r\n              <p>The system will then decide a winning card combination. If you match, you will win the entire pot. Else your bet will \r\n                go to the pot. </p>\r\n              <p>Please note this selection process is completely random and your chance of winning is always 1/16.</p>\r\n              <p>Each time bet is 0.05 Eth</p>\r\n              <br></br><br></br>\r\n              <h3>Your Bet</h3>\r\n              <p style={{fontSize:50}}><b>{this.state.challenges[0]} {this.state.challenges[1]} {this.state.challenges[2]}</b></p>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <div className='container'>\r\n            <div className='card-group'>\r\n              {this.getCard('A','card bg-primary')}\r\n              {this.getCard('B','card bg-warning')}\r\n              {this.getCard('C','card bg-danger')}\r\n              {this.getCard('D','card bg-success')}\r\n            </div> \r\n          </div>\r\n          <br></br>\r\n          <div>\r\n            <button className='btn btn-danger btn-lg' onClick={this.bet}>BET!</button>\r\n          </div>\r\n          <br></br>\r\n          <div className='container'>\r\n            <table className='table table-dark table-striped'>\r\n              <thead>\r\n                <tr>\r\n                  <th>Index</th>\r\n                  <th>Address</th>\r\n                  <th>Challenges</th>\r\n                  <th>Answer</th>\r\n                  <th>Pot</th>\r\n                  <th>Status</th>\r\n \r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  this.state.finalRecords.map((record, index) => {\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{record.index}</td>\r\n                        <td>{record.bettor}</td> \r\n                        <td>{record.challenges}</td>      \r\n                        <td>{record.answer}</td>      \r\n                        <td>{record.pot}</td>      \r\n                        <td>{record.win}</td>            \r\n                      </tr>\r\n                    )\r\n                  })\r\n                }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          \r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}